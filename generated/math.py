"""
Module: 'math' on micropython-v1.21-rp2
"""
# MCU: {'ver': 'v1.21', 'build': '', 'sysname': 'rp2', 'platform': 'rp2', 'version': '1.21.0', 'release': '1.21.0', 'port': 'rp2', 'family': 'micropython', 'name': 'micropython', 'machine': 'Raspberry Pi Pico W with RP2040', 'nodename': 'rp2'}
# Stubber: 1.5.7
from typing import Any

def pow(*args, **kwargs) -> Any:
    ...

def acos(*args, **kwargs) -> Any:
    ...

def acosh(*args, **kwargs) -> Any:
    ...

def asin(*args, **kwargs) -> Any:
    ...

def asinh(*args, **kwargs) -> Any:
    ...

def atan(*args, **kwargs) -> Any:
    ...

def atan2(*args, **kwargs) -> Any:
    ...

def atanh(*args, **kwargs) -> Any:
    ...

def ceil(*args, **kwargs) -> Any:
    ...

def copysign(*args, **kwargs) -> Any:
    ...

def cos(*args, **kwargs) -> Any:
    ...

def cosh(*args, **kwargs) -> Any:
    ...

def degrees(*args, **kwargs) -> Any:
    ...

e = 2.718282 # type: float
def erf(*args, **kwargs) -> Any:
    ...

def erfc(*args, **kwargs) -> Any:
    ...

def exp(*args, **kwargs) -> Any:
    ...

def expm1(*args, **kwargs) -> Any:
    ...

def fabs(*args, **kwargs) -> Any:
    ...

def factorial(*args, **kwargs) -> Any:
    ...

def floor(*args, **kwargs) -> Any:
    ...

def fmod(*args, **kwargs) -> Any:
    ...

def frexp(*args, **kwargs) -> Any:
    ...

def gamma(*args, **kwargs) -> Any:
    ...

inf = inf # type: float
def isclose(*args, **kwargs) -> Any:
    ...

def isfinite(*args, **kwargs) -> Any:
    ...

def isinf(*args, **kwargs) -> Any:
    ...

def isnan(*args, **kwargs) -> Any:
    ...

def ldexp(*args, **kwargs) -> Any:
    ...

def lgamma(*args, **kwargs) -> Any:
    ...

def log(*args, **kwargs) -> Any:
    ...

def log10(*args, **kwargs) -> Any:
    ...

def log2(*args, **kwargs) -> Any:
    ...

def modf(*args, **kwargs) -> Any:
    ...

nan = nan # type: float
pi = 3.141593 # type: float
def radians(*args, **kwargs) -> Any:
    ...

def sin(*args, **kwargs) -> Any:
    ...

def sinh(*args, **kwargs) -> Any:
    ...

def sqrt(*args, **kwargs) -> Any:
    ...

def tan(*args, **kwargs) -> Any:
    ...

def tanh(*args, **kwargs) -> Any:
    ...

tau = 6.283185 # type: float
def trunc(*args, **kwargs) -> Any:
    ...

